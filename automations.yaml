#################################################################
## HASS related
#################################################################
- id: hass_start_notification
  alias: NOTIFY (START) Home Assistant
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
  - platform: homeassistant
    event: start
  action:
  - service: notify.mobile_app_william
    data:
      title: ''
      message: Home Assistant Started

- id: 'sync_bedroom_lamp_state'
  alias: "Sync Bedroom Lamps States"
  initial_state: true
  trigger:
    platform: homeassistant
    event: start
  action:
    - service: mqtt.publish
      data:
        topic: "tasmotas/cmnd/state"
        payload: ""

#################################################################
## Presence detection
#################################################################
- id: notify_resident_emily
  alias: NOTIFY (Location) Resident
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  - condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  trigger:
  - platform: state
    entity_id: person.emily
  action:
  - service: notify.mobile_app_william
    data_template:
      message: '{{ trigger.from_state.attributes.friendly_name }} is {% if trigger.to_state.state == ''home'' %}at home{% elif trigger.to_state.state == ''not_home'' %}away{%else %}at {{ trigger.to_state.state }}{% endif %}.'

- id: notify_resident_william
  alias: NOTIFY (Location) Resident
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  - condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  trigger:
  - platform: state
    entity_id: person.william
  action:
  - service: notify.mobile_app_emily
    data_template:
      message: '{{ trigger.from_state.attributes.friendly_name }} is {% if trigger.to_state.state == ''home'' %}at home{% elif trigger.to_state.state == ''not_home'' %}away{%else %}at {{ trigger.to_state.state }}{% endif %}.'

- id: notify_guest_deb
  alias: Notify when Deb has arrived
  trigger:
    platform: state
    entity_id: person.Deb
    to: 'home'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  - condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    service: notify.all_devices
    data:
      message: 'Deb is here!'

- id: request_location_update
  alias: Request Location Update
  trigger:
  - platform: state
    entity_id: input_boolean.location_update
    to: 'on'
  action:
  - service: notify.all_devices
    data:
      message: "request_location_update"

- id: reset_location_update
  alias: Reset Location Update
  trigger:
  - platform: state
    entity_id: input_boolean.location_update
    to: 'on'
    for:
      seconds: 5
  action:
  - service: homeassistant.turn_off
    entity_id: input_boolean.location_update
  
- id: activate_guest_mode_when_guests_arrive
  alias: activate guest mode when guests are at home
  trigger:
    platform: state
    entity_id: group.guests
    to: 'home'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.guest_mode

- id: deactivate_guest_mode_when_guests_leave
  alias: Deactivate guest mode when guests leave
  trigger:
    platform: state
    entity_id: group.guests
    to: 'not_home'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.guest_mode
#################################################################
## Door Notifications
#################################################################
- id: notify_garage_door
  alias: Notify Garage door
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  - condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_door
  action:
  - service: notify.all_devices
    data_template:
      message: '{{ trigger.from_state.attributes.friendly_name }} is {% if trigger.to_state.state == ''off'' %}closed{% else %}open{% endif %}.'

- id: notify_garage_open_10_min
  alias: Notify Garage open for 10 min
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  - condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_door
    to: 'on'
    for:
      minutes: 10
  action:
  - service: notify.all_devices
    data:
      message: Garage door has been open for 10 minutes! Close it!

#################################################################
## Home Security
#################################################################
- id: alarm_triggered_away
  alias: Trigger alarm while armed away
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_away
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_sensor_motion
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.back_door
    to: 'on'
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.home_alarm

- id: alarm_notify
  alias: Send notification when alarm triggered
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home_alarm
    to: triggered
  action:
  - service: notify.all_devices
    data:
      message: ALARM! The alarm has been triggered at {{ states('sensor.date_time') }}
      data:
        ttl: 0
        priority: high
  - service: tts.google_say
    entity_id: media_player.kitchen_display
    data:
      message: Warning. Please leave the premesis. Police have been notified.
  - service: light.turn_on
    data:
      entity_id:
      - light.kitchen_pendant_lights
      - light.lounge_room_lamp
      - light.55404001dc4f22ac01ca
      - light.bedroom_lamp_left
      - light.ollie_s_lamp
      - light.teddy_s_lamp
      brightness: 255
      rgb_color:
      - 255
      - 0
      - 0
      flash: long

- id: alarm_notify_disarmed
  alias: Send notification when alarm is Disarmed
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home_alarm
    to: disarmed
  action:
  - service: tts.google_say
    entity_id: media_player.kitchen_display
    data:
      message: Alarm is now disarmed.
  - service: notify.all_devices
    data_template:
      message: The alarm is now Disarmed. {{ states('sensor.date_time') }}

- id: alarm_notify_pending
  alias: Send notification when alarm is in pending status
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home_alarm
    to: pending
  action:
  - service: notify.all_devices
    data_template:
      message: The alarm is in pending status. {{ states('sensor.date_time') }}

- id: alarm_notify_armed_away
  alias: Send notification when alarm is Armed in Away mode
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home_alarm
    to: armed_away
  action:
  - service: tts.google_say
    entity_id: media_player.kitchen_display
    data:
      message: Alarm has been armed.
  - service: notify.all_devices
    data_template:
      message: 'Alarm is now armed. {{ states(''sensor.date_time'') }}'

- id: alarm_notify_armed_home
  alias: Send notification when alarm is Armed in Home mode
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home_alarm
    to: armed_home
  action:
  - service: notify.all_devices
    data_template:
      message: 'Alarm is now armed. {{ states(''sensor.date_time'') }}'

- id: alarm_disable_when_arriving
  alias: Alarm disarm when return home
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: pending
  trigger:
  - platform: state
    entity_id: person.william
    from: not_home
    to: home
  - platform: state
    entity_id: person.emily
    from: not_home
    to: home
  action:
  - service: notify.all_devices
    data_template:
      message: Disarming the alarm at {{ states('sensor.date_time') }}
  - service: tts.google_say
    entity_id: media_player.kitchen_display
    data:
      message: Disarming Alarm.
  - service: alarm_control_panel.alarm_disarm
    entity_id: alarm_control_panel.home_alarm
    data:
      code: !secret alarm_code

- id: arm_alarm_when_away
  alias: Arm alarm when away and not armed
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  trigger:
  - platform: state
    entity_id: group.household
    to: not_home
    for:
      minutes: 15
  action:
  - service: notify.all_devices
    data:
      message: "No one is at home, do you want to arm the alarm?"
      data:
        actions:
          - action: "arm_alarm"
            title: "Arm Alarm"
          - action: dismiss_prompt
            title: "No"
        tag: alarm_prompt

- id: mobile_action_dismiss_prompt
  alias: Dismiss prompt to arm alarm
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: dismiss_prompt
  action:
  - service: notify.all_devices
    data:
      message: clear_notification
      data:
        tag: alarm_prompt

- id: mobile_action_arm_alarm
  alias: Arm Alarm from Notificaiton Action
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: arm_alarm
  action:
  - service: alarm_control_panel.alarm_arm_away
    entity_id: alarm_control_panel.home_alarm
  - service: notify.all_devices
    data:
      message: clear_notification
      data:
        tag: alarm_prompt

#################################################################
## Object Detection
#################################################################
- id: front_door_object_detection
  alias: Detect Object at the front door
  trigger:
  - entity_id: binary_sensor.front_door_motion
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.front_door
      filename: /config/www/tmp/image.jpg
  - delay: 00:00:03
  - service: image_processing.scan
    entity_id: image_processing.deepstack_detector
  - service: image_processing.scan
    entity_id: image_processing.facebox_saved_image

- id: face_recognised
  alias: Face recognised
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
    platform: event
    event_type: image_processing.detect_face
  action:
    - service_template: >-
        {% if not is_state('sensor.front_door_detection' , 'unavailable') %} 
        notify.all_devices
        {% endif %}
      data_template:
        message: "{{ states('sensor.front_door_detection') }} is at the front door"
        data:
          image: !secret temp_image
          clickAction: !secret motioneye_stream
          actions:
            - action: "URI"
              title: View Image
              uri: !secret temp_image
    - service_template: >-
        {% if not is_state('sensor.front_door_detection' , 'unavailable') %}
        tts.google_say
        {% endif %}
      data_template:
        entity_id: media_player.kitchen_display
        message: "{{ states('sensor.front_door_detection') }} is at the front door"

- id: person_detection
  alias: Notify when person detected
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.options_notifications_push
    state: 'on'
  trigger:
  - platform: event
    event_type: deepstack.object_detected
    event_data:
      object: person
  - platform: event
    event_type: deepstack.object_detected
    event_data:
      object: car
  action:
  - service: notify.all_devices
    data_template:
      message: '{{ trigger.event.data.object | title }} detected {% if trigger.event.data.object == ''person'' %}at the front door{% else %}in the driveway{% endif %}.'
      data:
        image: !secret deepstack_latest_person
        clickAction: !secret motioneye_stream
        actions:
        - action: "URI"
          title: View Image
          uri: !secret deepstack_latest_person

#################################################################
## Light Automations
#################################################################
- id: turn_on_kitchen_pendant_lights_when_motion_detected
  alias: Turn on kitchen lights when lumens are low and motion detected
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.kitchen_sensor_motion
    to: 'on'
  condition:
  - condition: time
    after: 06:00:00
    before: '18:30:00'
  - condition: numeric_state
    entity_id: sensor.kitchen_sensor_illuminance_lux
    below: '320'
  action:
    - service: light.turn_on
      data:
        entity_id: light.kitchen_pendant_lights
        brightness_pct: 100
        color_temp: 1000
    - service: light.turn_on
      data:
        entity_id: light.kitchen_downlight
        brightness_pct: 100
        color_temp: 460

- id: dim-lights-after-10min
  alias: Dim lights after 10min
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_sensor_motion
    to: 'off'
    for: 0:10:00
  condition:
  - condition: time
    after: 06:00:00
    before: '19:50:00'
  - condition: state
    entity_id: light.kitchen_pendant_lights
    state: 'on'
  action:
  - service: scene.turn_on
    entity_id: scene.kitchen_dim
    
- id: turn_off_kitchen_pendant_lights_when_lumens_high
  alias: Turn off kitchen lights when lumens are high
  initial_state: 'on'
  trigger:
  - platform: numeric_state
    entity_id: sensor.kitchen_sensor_illuminance_lux
    above: '320'
    for:
      minutes: 3
  condition:
  - condition: time
    after: '06:00:00'
    before: '18:30:00'
  action:
  - service: light.turn_off
    entity_id: light.kitchen_pendant_lights
  - service: light.turn_off
    entity_id: light.kitchen_downlight
    
- id: light_on_at_sunset
  alias: Turn on all lights at sunset
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: group.household
    state: home
  trigger:
    platform: sun
    event: sunset
    offset: "-02:00:00"
  action:
  - service: scene.turn_on
    entity_id: scene.bright_lights
  - service: scene.turn_on
    entity_id: scene.bedroom_lamps_bright
  - service: light.turn_on
    data:
      entity_id: light.lounge_room_lamp
      brightness: 255
      white_value: 255
      xy_color:
        - 0.323
        - 0.329

- id: turn_on_kitchen_pendant_lights_when_movement_detected
  alias: Turn on Kitchen Lights when movement is detected
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_sensor_motion
    to: 'on'
  condition:
  - condition: time
    after: '18:30:00'
    before: '19:50:00'
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
    - service: light.turn_on
      data:
        entity_id: light.kitchen_pendant_lights
        brightness_pct : 50
    - service: light.turn_on
      data:
        entity_id: light.kitchen_downlight
        brightness_pct: 50

    
- id: turn_off_kitchen_pendant_lights_when_no_movement
  alias: Turn off kitchen light 15 minutes after last movement
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_sensor_motion
    to: 'off'
    for: 0:15:00
  condition:
  - condition: time
    after: '19:50:00'
    before: 06:00:00
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
  - service: light.turn_off
    entity_id: light.kitchen_pendant_lights
  - service: light.turn_off
    entity_id: light.kitchen_downlight
    
- id: turn_on_off_bedroom_lights_with_click
  alias: Turn on and off bedroom lights with click
  trigger:
    platform: state
    entity_id: sensor.wireless_button_click
    to: 'single'
  action:
    service: light.toggle
    entity_id: light.bedroom_lamps

- id: turn_on_bedroom_bright_with_click
  alias: Turn on bedroom bright scene with click
  trigger:
    platform: state
    entity_id: sensor.wireless_button_click
    to: 'double'
  action:
    service: scene.turn_on
    entity_id: scene.bedroom_lamps_bright
    
- id: turn_on_bedroom_night_light_with_click
  alias: Turn on bedroom night lights with click
  trigger:
    platform: state
    entity_id: sensor.wireless_button_click
    to: 'triple'
  action:
    service: scene.turn_on
    entity_id: scene.bedroom_night_light

- id: light_off_at_sunrise
  alias: Turn off lights at sunrise
  initial_state: 'on'
  trigger:
    platform: sun
    event: sunrise
  action:
  - service: light.turn_off
    entity_id: light.ollie_s_lamp
  - service: light.turn_off
    entity_id: light.teddy_s_lamp
  - service: light.turn_off
    entity_id: light.lounge_room_lamp

- id: light_on_nightlight
  alias: Turn on night light
  initial_state: 'on'
  condition:
  - condition: state
    entity_id: group.household
    state: home
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  trigger:
    platform: time
    at: '19:00:00'
  action:
  - service: scene.turn_on
    entity_id: scene.night_light

- id: turn_off_lights_at_night
  alias: Turn off lights when late
  trigger:
    platform: time
    at: "22:00:00"
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
    service: light.turn_off
    entity_id: light.lounge_room_lamp

- id: dynamically_adjust_kitchen_lights
  alias: dynamically adjust kitchen lights
  trigger:
    platform: state
    entity_id: sensor.kitchen_sensor_illuminance_lux
  condition:
    condition: time
    after: "06:00:00"
    before: "18:30:00"
  action:
    - service: light.turn_on
      data_template:
        entity_id: light.kitchen_pendant_lights
        brightness: >
        {{ (-0.57 * states('sensor.kitchen_sensor_illuminance_lux') | float) + 283 | round }}
    - service: light.turn_on
      data_template:
        entity_id: light.kitchen_downlight
        brightness: >
        {{ (-0.57 * states('sensor.kitchen_sensor_illuminance_lux') | int) + 283 | round }}

#################################################################
## AC Automations
#################################################################
- alias: hvac-mode-controller-bedroom
  trigger:
    platform: mqtt
    topic: temp/climate/hvac_mode_bedroom
  condition:
    condition: or
    conditions:
    - condition: template
      value_template: '{{ trigger.payload == ''auto'' }}'
    - condition: template
      value_template: '{{ trigger.payload == ''heat'' }}'
    - condition: template
      value_template: '{{ trigger.payload == ''cool'' }}'
  action:
  - service: mqtt.publish
    data_template:
      topic: /aircon/34ea344df92e/power/set
      payload: 'ON'
  - service: mqtt.publish
    data_template:
      topic: /aircon/34ea344df92e/mode/set
      payload: >
          {% set values = { "auto":"AUTO", "heat":"HEATING", "cool":"COOLING", "off":"OFF" } %}
          {{ values[trigger.payload] if trigger.payload in values.keys() else "off" }}

- alias: hvac-mode-controller-bedroom-power
  trigger:
    platform: mqtt
    topic: temp/climate/hvac_mode_bedroom
    payload: 'off'
  action:
  - service: mqtt.publish
    data_template:
      topic: /aircon/34ea344df92e/power/set
      payload: 'OFF'
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.bedroom
      hvac_mode: 'off'

#################################################################
## ZigBee Stuff
#################################################################
- id: zigbee2mqtt_log_level
  alias: Zigbee2mqtt Log Level
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_select.zigbee2mqtt_log_level
  action:
  - service: mqtt.publish
    data:
      payload_template: '{{ states(''input_select.zigbee2mqtt_log_level'') }}'
      topic: zigbee2mqtt/bridge/config/log_level
- id: zigbee_join_enabled
  alias: Zigbee Join Enabled
  trigger:
    platform: state
    entity_id: switch.zigbee2mqtt_main_join
    to: 'on'
  action:
    service: timer.start
    entity_id: timer.zigbee_permit_join
- id: zigbee_join_disabled
  alias: Zigbee Join Disabled
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.zigbee_permit_join
  - platform: state
    entity_id: switch.zigbee2mqtt_main_join
    to: 'off'
  action:
  - service: timer.cancel
    data:
      entity_id: timer.zigbee_permit_join
  - service: switch.turn_off
    entity_id: switch.zigbee2mqtt_main_join

#################################################################
## Medication Reminder
#################################################################
- id: 'reset_meds_taken'
  alias: Reset morning meds taken
  trigger:
    platform: time
    at: 00:00:00
  action:
    service: input_boolean.turn_off
    data:
      entity_id: 
        - input_boolean.morning_meds_taken
        - input_boolean.evening_meds_taken
        - input_boolean.bedtime_meds_taken

- id: 'mark_morning_meds_taken'
  alias: Mark morning meds as taken
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'confirm_morning_meds'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.morning_meds_taken
    - service: notify.all_devices
      data:
        message: clear_notification
        data:
          tag: morning_meds
    - service: dwains_theme.notification_dismiss
      data:
        notification_id: morning_meds
 
- id: 'mark_evening_meds_taken'
  alias: Mark evening meds as taken
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'confirm_evening_meds'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.evening_meds_taken
    - service: notify.all_devices
      data:
        message: clear_notification
        data:
          tag: evening_meds
    - service: dwains_theme.notification_dismiss
      data:
        notification_id: evening_meds

- id: 'mark_bedtime_meds_taken'
  alias: Mark bedtime meds as taken
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'confirm_bedtime_meds'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.bedtime_meds_taken
    - service: notify.all_devices
      data:
        message: clear_notification
        data:
          tag: bedtime_meds
    - service: dwains_theme.notification_dismiss
      data:
        notification_id: bedtime_meds

- id: 'morning_meds_notification'
  alias: Morning meds Notificaiton
  trigger:
    platform: time
    at: "08:00:00"
  condition:
    - condition: state
      entity_id: input_boolean.morning_meds_taken
      state: 'off'
  action:
    - service: notify.all_devices
      data:
        message: "Ollie needs Carvidilol (1.5ml), Aspirin (1.7ml) and Fruzi (1ml)"
        data:
          actions: 
            - action: "confirm_morning_meds"
              title: "Confirm"
          tag: morning_meds
          ttl: 0
          priority: high
    - service: dwains_theme.notification_create
      data:
        message: "Ollie needs Carvidilol (1.5ml), Aspirin (1.7ml) and Fruzi (1ml)"
        notification_id: morning_meds 

- id: 'morning_meds_reminder'
  alias: Morning meds reminder
  trigger:
    platform: time_pattern
    minutes: '/30'
  condition:
    - condition: state
      entity_id: input_boolean.morning_meds_taken
      state: 'off'
    - condition: time
      after: '08:30:00'
      before: '10:00:00'
  action:
    service: notify.all_devices
    data:
      message: "It looks like Ollie hasn't had his morning meds. Please make sure he has them."
      data:
        actions: 
          - action: "confirm_morning_meds"
            title: "Confirm"
        tag: morning_meds
        ttl: 0
        priority: high

- id: 'evening_meds_notification'
  alias: Evening meds Notificaiton
  trigger:
    platform: time
    at: "18:00:00"
  condition:
    - condition: state
      entity_id: input_boolean.evening_meds_taken
      state: 'off'
  action:
    - service: notify.all_devices
      data:
        message: "Ollie needs Lisinopril (3ml)"
        data:
          actions: 
            - action: "confirm_evening_meds"
              title: "Confirm"
          tag: evening_meds
          ttl: 0
          priority: high
    - service: dwains_theme.notification_create
      data:
        message: "Ollie needs Lisinopril (3ml)"
        notification_id: evening_meds  

- id: 'evening_meds_reminder'
  alias: Evening meds reminder
  trigger:
    platform: time_pattern
    minutes: '/30'
  condition:
    - condition: state
      entity_id: input_boolean.evening_meds_taken
      state: 'off'
    - condition: time
      after: '18:30:00'
      before: '20:00:00'
  action:
    service: notify.all_devices
    data:
      message: "It looks like Ollie hasn't had his evening meds. Please make sure he has them."
      data:
        actions: 
          - action: "confirm_evening_meds"
            title: "Confirm"
        tag: evening_meds
        ttl: 0
        priority: high

- id: 'bedtime_meds_notification'
  alias: Bedtime meds Notificaiton
  trigger:
    platform: time
    at: "19:30:00"
  condition:
    - condition: state
      entity_id: input_boolean.bedtime_meds_taken
      state: 'off'
  action:
    - service: notify.all_devices
      data:
        message: "Ollie needs Carvidilol (1.5ml)"
        data:
          actions:
            - action: "confirm_bedtime_meds"
              title: "Confirm"
          tag: bedtime_meds
          ttl: 0
          priority: high
    - service: dwains_theme.notification_create
      data:
        message: "Ollie needs Carvidilol (1.5ml)"
        notification_id: bedtime_meds

- id: 'bedtime_meds_reminder'
  alias: Bedtime meds reminder
  trigger:
    platform: time_pattern
    minutes: '/30'
  condition:
    - condition: state
      entity_id: input_boolean.bedtime_meds_taken
      state: 'off'
    - condition: time
      after: '20:00:00'
      before: '21:00:00'
  action:
    service: notify.all_devices
    data:
      message: "It looks like Ollie hasn't had his bedtime meds. Please make sure he has them."
      data:
        actions: 
          - action: "confirm_bedtime_meds"
            title: "Confirm"
        tag: bedtime_meds
        ttl: 0
        priority: high
#################################################################
## Shopping List Notification
#################################################################
#- id: "shopping_list_updated"
#  alias: Shopping List Updated
#  trigger:
#    platform: event
#    event_type: shopping_list_updated
#  condition:
#    - condition: state
#      entity_id: input_boolean.options_notifications_push
#      state: 'on'
#  action:
#    service: notify.all_devices
#    data:
#      message: "Shopping List Updated"
#      data:
#        click_action: !secret shopping_list


